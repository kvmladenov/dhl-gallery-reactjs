{"version":3,"sources":["Config/Store.js","Config/Reducer.js","Card/Card.js","Album/Album.js","Favorite/Favorite.js","Main.js","Loading/Loading.js","App.js","serviceWorker.js","index.js"],"names":["rootReducer","combineReducers","photos","state","action","type","photo","id","console","log","persistedState","serializedState","localStorage","getItem","JSON","parse","error","loadFromLocalStorage","favoriteStore","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","subscribe","stringify","setItem","saveToLocalStorage","getState","Card","event","clickedElement","target","this","props","isSaved","albumType","classList","remove","buildActionToStore","add","dispatch","updateState","className","src","thumbnailUrl","alt","title","properClassOnload","onClick","handleSavingToFavorite","Component","Album","getStorePhotos","albumPhotos","isContentLoaded","favoritePhotos","setState","photoID","index","parseInt","Container","Object","keys","map","key","getSavedPhoto","Favorite","isFavoriteLoaded","updatePhotos","bind","getStoreData","Main","exact","path","to","defaultIndex","albums","albumID","Loading","issueInConnection","App","isDataLoaded","isThereAnError","wantedAlbums","fetch","then","response","ok","json","Error","data","length","albumId","indexOf","catch","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a572a6ac.chunk.js","sourcesContent":["import { createStore, combineReducers } from 'redux';\r\nimport { favoriteReducer } from './Reducer';\r\n\r\nfunction saveToLocalStorage(state) {\r\n\ttry {\r\n\t\tconst serializedState = JSON.stringify(state);\r\n\t\tlocalStorage.setItem('state', serializedState)\r\n\t}\r\n\tcatch (error) {\r\n\t\tconsole.log(error);\r\n\t}\r\n}\r\n\r\nfunction loadFromLocalStorage() {\r\n\ttry {\r\n\t\tconst serializedState = localStorage.getItem('state');\r\n\t\tif (serializedState === null) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\treturn JSON.parse(serializedState);\r\n\t}\r\n\tcatch (error) {\r\n\t\tconsole.log(error);\r\n\t\treturn undefined;\r\n\t}\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n\tphotos: favoriteReducer,\r\n})\r\n\r\nconst persistedState = loadFromLocalStorage();\r\n\r\nexport const favoriteStore = createStore(\r\n\trootReducer,\r\n\tpersistedState,\r\n\twindow.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nfavoriteStore.subscribe(() => saveToLocalStorage(favoriteStore.getState()));\r\n\r\n\r\n","export function favoriteReducer(state = {}, action) {\r\n\tswitch (action.type) {\r\n\t\tcase 'ADD':\r\n\t\t\tstate = {\r\n\t\t\t\t...state,\r\n\t\t\t\t[action.photo.id]: action.photo\r\n\t\t\t};\r\n\t\t\tconsole.log('----------- NEW item is Added in store----------');\r\n\r\n\t\t\treturn state;\r\n\r\n\t\tcase 'REMOVE':\r\n\t\t\tdelete state[action.photo.id];\r\n\t\t\tconsole.log('----------- 1 item is REMOVED in store----------');\r\n\t\t\treturn state;\r\n\r\n\t\tcase 'GET':\r\n\t\t\treturn state;\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n","import React, {Component} from 'react';\r\nimport './Card.scss';\r\nimport { favoriteStore } from '../Config/Store';\r\n\r\n\r\nexport class Card extends Component {\r\n\thandleSavingToFavorite(event) {\r\n\t\tlet clickedElement = event.target;\r\n\r\n\t\t// Prepare proper class if photo is saved in favorite or not:\r\n\t\tif (this.props.isSaved) {\r\n\t\t\tif (this.props.albumType !== 'favorite') {\r\n\t\t\t\tclickedElement.classList.remove('saved');\r\n\t\t\t}\r\n\r\n\t\t\tthis.buildActionToStore(false);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tclickedElement.classList.add('saved');\r\n\t\t\tthis.buildActionToStore(true);\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\r\n\t// Build action object which we send to store:\r\n\tbuildActionToStore(isSaved) {\r\n\t\tlet action = {};\r\n\t\tif (isSaved) {\r\n\t\t\taction = {\r\n\t\t\t\ttype: 'ADD',\r\n\t\t\t\tphoto: {...this.props.photo}\r\n\t\t\t};\r\n\t\t}\r\n\t\telse {\r\n\t\t\taction = {\r\n\t\t\t\ttype: 'REMOVE',\r\n\t\t\t\tphoto: {...this.props.photo}\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tfavoriteStore.dispatch(action);\r\n\r\n\t\t// If Album Type is FAVORITE, update Favorite Component State:\r\n\t\tif (this.props.albumType === 'favorite') {\r\n\t\t\tthis.props.updateState();\r\n\t\t}\r\n\t}\r\n\r\n\tproperClassOnload() {\r\n\t\treturn this.props.isSaved ? 'saved' : '';\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"card\">\r\n\t\t\t\t<img src={this.props.photo.thumbnailUrl} className=\"card-img-top\" alt={this.props.photo.title}/>\r\n\r\n\t\t\t\t<div className=\"card-body\">\r\n\t\t\t\t\t<p className=\"card-text\">{this.props.photo.title}</p>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<span className={`mark-fav ${this.properClassOnload()}`} onClick={(event) => {this.handleSavingToFavorite(event)}}>\r\n\t\t\t\t\t<i className=\"far fa-star unmarked\"/>\r\n\t\t\t\t\t<i className=\"fas fa-star marked\"/>\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n","import React, {Component} from 'react';\r\nimport './Album.scss';\r\nimport { Container } from 'react-bootstrap';\r\nimport { Card } from '../Card/Card';\r\nimport { favoriteStore } from '../Config/Store';\r\n\r\nexport class Album extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tgetStorePhotos: {},\r\n\t\t\talbumPhotos: {},\r\n\t\t\tisContentLoaded: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\t// Get all data from Store:\r\n\t\tlet favoritePhotos = favoriteStore.getState().photos;\r\n\r\n\t\t// Save in state all photos in Store:\r\n\t\tthis.setState({\r\n\t\t\tgetStorePhotos: {...favoritePhotos}\r\n\t\t});\r\n\r\n\t\t// Save in state all photos needed for album:\r\n\t\tthis.setState({\r\n\t\t\talbumPhotos: {...this.props.photos}\r\n\t\t}, () => {\r\n\t\t\t// After that display content:\r\n\t\t\tthis.setState({\r\n\t\t\t\tisContentLoaded: true\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tgetSavedPhoto(photoID) {\r\n\t\tif (this.state.getStorePhotos) {\r\n\t\t\tphotoID = parseInt(photoID, 10);\r\n\r\n\t\t\tfor (const index in this.state.getStorePhotos) {\r\n\t\t\t\tif (this.state.getStorePhotos[index].id === photoID) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t{this.state.isContentLoaded &&\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<h2>Album {this.props.id}</h2>\r\n\r\n\t\t\t\t\t\t<Container className=\"container-photos\">\r\n\t\t\t\t\t\t\t{Object.keys(this.state.albumPhotos).map((photoID, key) =>\r\n\t\t\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\t\t\tkey={key}\r\n\t\t\t\t\t\t\t\t\tphoto={this.state.albumPhotos[photoID]}\r\n\t\t\t\t\t\t\t\t\tisSaved={this.getSavedPhoto(photoID)}\r\n\t\t\t\t\t\t\t\t\talbumType={'stock'}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</Container>\r\n\t\t\t\t\t</>\r\n\t\t\t\t}\r\n\t\t\t</>\r\n\t\t)\r\n\t}\r\n}\r\n","import React, {Component} from 'react';\r\nimport './Favorite.scss';\r\nimport { Container } from 'react-bootstrap';\r\nimport { Card } from '../Card/Card';\r\nimport { favoriteStore } from '../Config/Store';\r\n\r\nexport class Favorite extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tphotos: {},\r\n\t\t\tisFavoriteLoaded: false,\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.updatePhotos();\r\n\t}\r\n\r\n\tupdatePhotos() {\r\n\t\tlet favoritePhotos = favoriteStore.getState().photos;\r\n\r\n\r\n\t\tthis.setState({\r\n\t\t\tphotos: {...favoritePhotos}\r\n\t\t}, () => {\r\n\t\t\tthis.setState({isFavoriteLoaded: true});\r\n\t\t})\r\n\t}\r\n\r\n\tgetSavedPhoto(photoID) {\r\n\t\tif (this.state.getStorePhotos) {\r\n\t\t\tphotoID = parseInt(photoID, 10);\r\n\r\n\t\t\tfor (const index in this.state.getStorePhotos) {\r\n\t\t\t\tif (this.state.photos[index].id === photoID) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<>{this.state.isFavoriteLoaded &&\r\n\t\t\t\t<>\r\n\t\t\t\t\t<h2>Favorite Photos</h2>\r\n\r\n\t\t\t\t\t<Container className=\"container-photos\">\r\n\t\t\t\t\t\t{this.state.photos && Object.keys(this.state.photos).map((photoID, key) =>\r\n\t\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\t\tkey={key}\r\n\t\t\t\t\t\t\t\tphoto={this.state.photos[photoID]}\r\n\t\t\t\t\t\t\t\tisSaved={true}\r\n\t\t\t\t\t\t\t\talbumType={'favorite'}\r\n\t\t\t\t\t\t\t\tupdateState={this.updatePhotos.bind(this)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</Container>\r\n\t\t\t\t</>\r\n\t\t\t}</>\r\n\t\t)\r\n\t}\r\n}\r\n","import React, {Component} from 'react';\r\nimport './Main.scss';\r\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\r\nimport { Container } from 'react-bootstrap';\r\nimport { Tab, TabList, TabPanel, Tabs } from 'react-tabs';\r\n\r\nimport { Album } from './Album/Album';\r\nimport { Favorite } from './Favorite/Favorite';\r\nimport { favoriteStore } from './Config/Store';\r\n\r\nfavoriteStore.subscribe(() => {\r\n\tlet getStoreData = favoriteStore.getState().photos;\r\n\tconsole.log('------ STORE CONTAINS ---------: ', getStoreData);\r\n});\r\n\r\nexport class Main extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Container>\r\n\t\t\t\t<Router>\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t<Route exact={true} path=\"/\">\r\n\t\t\t\t\t\t\t<Link to={'/dhl-gallery-reactjs'} className=\"btn btn-primary\">\r\n\t\t\t\t\t\t\t\tGo to application\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/dhl-gallery-reactjs/\">\r\n\t\t\t\t\t\t\t<Tabs defaultIndex={0}>\r\n\t\t\t\t\t\t\t\t<TabList>\r\n\t\t\t\t\t\t\t\t\t<Tab><i className=\"fas fa-star\"/> Favorite</Tab>\r\n\t\t\t\t\t\t\t\t\t{Object.keys(this.props.albums).map((albumID, key) =>\r\n\t\t\t\t\t\t\t\t\t\t<Tab key={key}><i className=\"fas fa-images\"/> Album {albumID}</Tab>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t\t</TabList>\r\n\r\n\t\t\t\t\t\t\t\t<TabPanel>\r\n\t\t\t\t\t\t\t\t\t<Favorite />\r\n\t\t\t\t\t\t\t\t</TabPanel>\r\n\r\n\t\t\t\t\t\t\t\t{Object.keys(this.props.albums).map((albumID, key) =>\r\n\t\t\t\t\t\t\t\t\t<TabPanel key={key}>\r\n\t\t\t\t\t\t\t\t\t\t<Album\r\n\t\t\t\t\t\t\t\t\t\t\tid={albumID}\r\n\t\t\t\t\t\t\t\t\t\t\tphotos={this.props.albums[albumID]}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</TabPanel>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</Tabs>\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route>\r\n\t\t\t\t\t\t\t<p>Oopps 404!</p>\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t</Router>\r\n\t\t\t</Container>\r\n\t\t)\r\n\t}\r\n}\r\n","import React, {Component} from 'react';\r\nimport './Loading.scss';\r\n\r\nexport class Loading extends Component {\r\n\trender() {\r\n\t\treturn this.props.issueInConnection ? <p className=\"error\">Something went wrong on api server!</p> : <p className=\"loading\">LOADING...</p>\r\n\t}\r\n}\r\n\r\n","import React, {Component} from 'react';\r\nimport './App.scss';\r\nimport { Main } from './Main';\r\nimport { Loading } from './Loading/Loading';\r\n\r\nclass App extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tisDataLoaded: false,\r\n\t\t\tisThereAnError: false,\r\n\t\t\twantedAlbums: [1, 2, 3, 4, 5],\r\n\t\t\talbums: {}\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/photos')\r\n\t\t.then((response) => {\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\t// Handle error and show proper screen on the user:\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tisThereAnError: true\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthrow new Error('[fetch data] Something went wrong on api server!');\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn response.json();\r\n\t\t\t}\r\n\t\t})\r\n\t\t.then((data) => {\r\n\t\t\tfor(let index = 0; index < data.length; index++) {\r\n\t\t\t\tif (data[index].albumId > 5) {\r\n\t\t\t\t\t// Show Main Component and break the loop:\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tisDataLoaded: true\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.state.wantedAlbums.indexOf(data[index].albumId) > -1) {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\talbums: {\r\n\t\t\t\t\t\t\t...this.state.albums,\r\n\t\t\t\t\t\t\t[data[index].albumId]: {\r\n\t\t\t\t\t\t\t\t...this.state.albums[data[index].albumId],\r\n\t\t\t\t\t\t\t\t[data[index].id]: data[index]\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\tthrow(error);\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<>{\r\n\t\t\t\tthis.state.isDataLoaded ?\r\n\t\t\t\t<Main albums={this.state.albums}/>\r\n\t\t\t\t:\r\n\t\t\t\t<Loading issueInConnection={this.state.isThereAnError} />\r\n\t\t\t}</>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}